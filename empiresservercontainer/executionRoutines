#!/bin/bash

rdm=$RANDOM


red(){
printf '\e[38;5;210m' > /dev/tty
}

yellow(){
printf '\e[38;5;221m' > /dev/tty
}
green(){
printf '\e[38;5;042m' > /dev/tty
}
blue(){
printf '\e[38;5;039m' > /dev/tty
}

gray(){
printf '\e[38;5;037m' > /dev/tty
}

function gamecontentUpdate(){
export contentlifecyclegauge="${origindir}/contentlifecycle"
export contentUptLog=${origindir}/contentUpdateSync.log
function updated(){
export tmpProcessDir=${origindir}/tmp
export patchtarget=${origindir}/._MEI202028
if [ ! -d ${tmpProcessDir} ]; then
rm -rf ${tmpProcessDir}
mkdir ${tmpProcessDir}
fi
cd ${tmpProcessDir}
echo "Updating Game"
svn checkout https://github.com/Questandachievement7Developer/RaiseTheEmpiresPort_Native/trunk/empiresservercontainer/raisetheempiresMod-dev
git clone https://github.com/AcidCaos/raisetheempires raisetheempires-dev
mkdir fusionServer
echo "Fusion Server!"
cp -rv raisetheempires-dev fusionServer
cp -rvua raisetheempiresMod-dev fusionServer
echo "Patching runtime!"
cp -rvua fusionServer/* ${patchtarget}
cd ${origindir}
echo "Cleaning Directory"
rm -rfv ${tmpProcessDir}
}

if [ ! -f ${contentlifecyclegauge} ]; then
echo 0 > ${contentlifecyclegauge}
fi

if [ -f ${contentlifecyclegauge} ] && [ $(cat ${contentlifecyclegauge}) -gt 10 ]; then #deffered update when you run 10x
echo 0 > ${contentlifecyclegauge}
updated >> ${contentUptLog} 2>&1 &
registerPID updatedaemon
else
lifecycleFullLine=$(cat ${contentlifecyclegauge})
lifecycle=${lifecycleFullLine} # basically instructs it to only read first line because without ""
lifecycle=$(( ${lifecycle} + 1 ))
echo ${lifecycle} > ${contentlifecyclegauge}
fi

}

function procManager(){
export procdir=${origindir}/proc
if [ ! -d ${procdir} ]; then
mkdir ${origindir}/proc
fi
}

function registerPID(){
procManager
if [ -z $1 ]; then
echo $! > ${procdir}/proc_$!
else
echo $! > ${procdir}/proc_$1
fi
}

function reqStopProc(){
procManager
for z in $(ls ${procdir}/*${1}*); do
PID=$(cat ${procdir}/${z})
rm -f ${procdir}/${z}
kill -9 ${PID}
done
}

function procTeardown(){
procManager
red
echo "PROCESS TEARDOWN CALLED!"
for z in $(ls ${procdir}); do
PID=$(cat ${procdir}/${z})
rm -f ${procdir}/${z}
kill -9 ${PID}
done
green
echo "TEARDOWN FINISHED!"
}


function serverRun(){
cd ${origindir} ; sh periodicSaveSnapshot &
registerPID periodicSaveSnapshot
mkdir ${RUNTIMEDIR} ;mv RaiseTheEmpires/* ${RUNTIMEDIR}; mv ${RUNTIMEDIR}/fileSave RaiseTheEmpires
cd ${RUNTIMEDIR} ;python3 empires-server.py --host 0.0.0.0 --port 5005 --no-popup >> ${origindir}/SERVERTHREAD.log 2>&1 &
registerPID empiresserver
tail -f ${origindir}/SERVERTHREAD.log | grep traceback &
registerPID traceback
clear ;echo Server is running!;echo Copy paste the link below on Puffin Browser;ssh -o "StrictHostKeyChecking=no" -o "ServerAliveInterval=360" -l "RaiseTheEmpires-$rdm" -T -R 80:localhost:5005 ssh.localhost.run
dialog --msgbox "Server is Terminated" 40 40
reqStopProc periodicSaveSnapshot
reqStopProc empiresserver
reqStopProc traceback
}

function serverLocal(){
cd ${origindir} ; sh periodicSaveSnapshot &
registerPID periodicSaveSnapshot
mkdir ${RUNTIMEDIR} ;mv RaiseTheEmpires/* ${RUNTIMEDIR}; mv ${RUNTIMEDIR}/fileSave RaiseTheEmpires
echo '===================================';echo Server is running!;echo Local mode can only be played on PC;echo Connect to server address below;echo '==================================='
cd ${RUNTIMEDIR} ; python3 empires-server.py --host 0.0.0.0 --port $RANDOM
dialog --msgbox "Server is Terminated" 40 40
reqStopProc periodicSaveSnapshot
}

function ExportSave(){
rm -rf ~/storage/shared/RaiseTheEmpires
cp -r ${origindir}/RaiseTheEmpires/fileSave ~/storage/shared/RaiseTheEmpires
echo done

}

function changelogsee(){
less ${origindir}/changelog.txt
}

function ImportSave(){
cp -r ~/storage/shared/RaiseTheEmpires/* ${origindir}/RaiseTheEmpires/fileSave
echo done

}

function trimSTG(){
cp -r ~/storage/shared/RaiseTheEmpires/* ${origindir}/RaiseTheEmpires/fileSave
echo done

}

function UpdateSERVER(){
#searches for Specific Strings and Pull archives from that
echo Finding empires-server package
updatepackage=$(grep -ril / -e '#https://github.com/Neo-Oli/termux-ubuntu References # EMPIRESSERVERHEADER')
echo "${updatepackage}"
export rootdir=${origindir}/..
for a in ${updatepackage}; do
if [ -f "${a}" ]; then
  echo Update file detected
  previousBuild=$(cat ${origindir}/buildnumber)
  sleep 1
  echo Comparing Version
  if [[ ${a} -nt ${rootdir}/empires-server ]]; then
  echo Update Package is Newer
  tail -n +89 "${a}" > ${rootdir}/empires-RNT
  cd ${rootdir}
  echo "Patching game on the fly..."
  proot --link2symlink -0 tar -xf empires-RNT
  echo "Welp my work is done here"
  echo "Build Merged ${previousBuild} $(cat ${origindir}/buildnumber)"
  cd ${origindir}
else
  echo Update package is older so we wont do anything
fi
fi
done
sleep 9
}

function exitserver(){
echo "Cleaning up...."
procTeardown
echo "Bye bye"
exit
}




function snapshotMenu(){
export snapshotdir=${origindir}/saveSnapshot
export defaultfilesave=${origindir}/RaiseTheEmpires/fileSave
#https://stackoverflow.com/questions/3200252/prompt-user-to-select-a-directory-with-a-bash-script-and-read-result
clear
ls ${origindir}/saveSnapshot/
echo '==================================='
echo 'Please Type the number of the snapshot date below'
read FolderSelection
if [ -z ${FolderSelection} ]; then
clear
echo Please enter the Date
snapshotMenu
fi

if [ ! -d ${origindir}/saveSnapshot/${FolderSelection} ];then
clear
echo uh oh Folder does not exist please enter correctly
snapshotMenu
fi

if [ -d ${origindir}/saveSnapshot/${FolderSelection} ]; then
clear
echo Snapshot Found
echo Restoring Snapshot
cp -rv ${snapshotdir}/${FolderSelection}/* ${defaultfilesave}
fi

}
