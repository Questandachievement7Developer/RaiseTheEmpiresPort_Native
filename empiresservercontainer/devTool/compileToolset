#!/bin/sh

breakpoint(){
echo BREAKPOINT DEBUG
exit
}


wrapupDevEnv(){
cd ${origindir}
rm -rf *fakeroot* ${origindir}/installCache
cd ../..
tar -cvzf RaiseTheEmpiresPort_native.tar.gz RaiseTheEmpiresPort_native
exit
}

cleanup(){
rm -rf ${origindir}/RaiseTheEmpires ${origindir}/fakeroot
#rm -rf ${origindir}/fakeroot
#echo "cleanup() ignored"
}

reposync_rteMain(){
  if [ ! -d raisetheempires-dev ]; then
    echo newly imported Repostitory
    git clone https://github.com/AcidCaos/raisetheempires raisetheempires-dev
  fi
  if [ ! -d raisetheempires-dev ]; then
    echo FATAL ERROR EMPIRES ALLIES SRC STILL NOT FOUND
    exit
  fi

}

reposync_mainBranch(){
  clear
  #set -e
  echo Are you the developer of RaiseTheEmpires?
  if [ ! -d raisetheempires-dev ]; then
    echo newly imported Repostitory
    git clone https://github.com/AcidCaos/raisetheempires raisetheempires-dev
  fi
  if [ ! -d raisetheempires-dev ]; then
    echo FATAL ERROR EMPIRES ALLIES SRC STILL NOT FOUND
    exit
  fi
  cd raisetheempires-dev
  git status
  git commit -a
  git pull
  export updateVer=$(git log -1 --format=%cd)
  #updateVer="stub"
  echo "Version ${updateVer}"
  cd ${origindir}
  echo Verified
sleep 4
  set +e
cd ${origindir}/..
clear
echo Please wait we are updating local repository
git add -v .
git commit -m "QuestandachievementBuild $(cat ${origindir}/buildnumber)_AcidCaos src ver ${updateVer}_Transmission $(date)"
git remote add origin https://github.com/Questandachievement7Developer/RaiseTheEmpiresPort_Native.git
#git pull https://github.com/Questandachievement7Developer/RaiseTheEmpiresPort_Native
git add -v .
git commit -m "QuestandachievementBuild $(cat ${origindir}/buildnumber)_AcidCaos src ver ${updateVer}_Transmission $(date)"
#git config --global user.name "Questandachievement7Developer"
#git config --global user.email "questandachievement"
git status
echo "================================================"
echo Saving Savepoint
git stash
echo Retrieving new changes from remote
git fetch
echo Restoring savepoint
git stash pop
echo Pushing local changes to the remote
git push --set-upstream origin master --force
cd ${origindir}
echo Repo Sync Done
read -n 1 -s -r -p "Press any key to continue"
}


sanitizeMountfakeroot(){
echo "function is not implemented()"
echo "This function is deprecated due to the report of crashes in linux systems"
}

deSanitizeMountfakeroot(){
echo "function is not implemented()"
echo "This function is deprecated due to the report of crashes in linux systems"
}


distroDetection(){
# DISTRO MANAGER DETECTION IS ALSO USED TO DETERMINE WHERE DOES THE SCRIPT RUN
export ptracecompat='1' #flag ptrace compatibility based on the distro or kernel that its running
export linktosymlinkActivated=0
export foreignenvironment="0" # flag foreign environment such as freebsd darwin or other nix system
export arch=$(uname -m)
if [ ! -z $(which apk) ]; then
  echo "Alpine Distro"
  export packmanager=apk
  export installParameter="add"
  export ptracecompat='1'
  export distro="alpine"
fi

if [ ! -z $(which apt) ]; then
export packmanager="apt"
export installParameter="install -y"
export distro="debianGNU"
fi
    if [ ! -z $(which pkg) ]; then
    export packmanager=pkg
    export installParameter="install -y"
    export linktosymlinkActivated=1
    echo Termux Detected
    export distro="termux"

    fi


    if [ ! -z $(which yum) ]; then
    export packmanager="yum"
    export installParameter="install -y"
    export distro="centOSGNU"
    fi

    if [[ $(grep Microsoft /proc/version) ]]; then
      export ptracecompat='0'
      export WSLenv="1"
    fi

    if [[ $( uname -a | grep darwin ) ]]; then
      echo "Bash is running on Darwin Kernel"
      echo "Running Experimental mode"
      yellow
      echo "${pbadge} Running environment setup" > /dev/tty
      if [ -z $(which brew) ]; then
      /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"
      fi
      export distro="darwinkrnl"
      export packmanager="brew"
      export foreignenvironment="1"
      export installParameter="install -y"
      export ptracecompat='0'
      export WSLenv="0"
    fi

    if [[ $(grep iSH /proc/version) ]]; then
      echo "Bash is running on iSH"
      echo "PTRACE ON iSH IS NOT SUPPORTED"
      export ptracecompat='0'
      export WSLenv="0"
    fi

    if [ ! -z $(which pacman) ]; then
    export packmanager="pacman"
    export installParameter="-Sy --noconfirm"
    export distro="archlinux"
    echo Redownloading Databases
    pacman -Syy
    fi

    if [ ! -z $(which easy_install) ]; then
    export pyPacman="easy_install"
    export pyInstallParam=""
    fi

    if [ ! -z $(which add-apt-repository) ]; then
    export packmanager="apt-get"
    export installParameter="install -y"
    fi

    if [ ! -z $(which pip) ]; then
    export pyPacman="pip"
    export pyInstallParam="install"
    fi

# Sourced from unifyServer technology
}

pkginstall(){
distroDetection
export installerprefix="[ModularInstaller]"
for a in ${1}; do
  echo "${installerprefix} Checking ${a}"
  ${packmanager} ${installParameter} ${a} >> ${origindir}/packageManager.log 2>&1
  ${pyPacman} ${pyInstallParam} ${a} >> ${origindir}/packageManager.log 2>&1
done

}




compileUniversal(){
  export containerTemplate=${origindir}/containerdist/${Arch}
  export fakeroot=${origindir}/fakeroot
  export CurrentArchfakerootCache=${origindir}/${Arch}_fakeroot
  export containerConfiguration=${origindir}/containerdist/masterconf/${Arch}
  export fakerootPacked=${origindir}/fakeroot/${Arch}
  export installCache=${origindir}/installCache
  export lastArch=$(cat ${origindir}/lastCompileArch)
  export lastArchCache=${origindir}/${lastArch}_fakerootCache


  BL=""



if [ -z ${instTarget} ];then
echo You didnt select the platform target
echo exiting
exit
fi

if [ -z ${Arch} ]; then
echo You didnt select the Architechture target
echo exiting
exit
fi

echo "${compileprefix} Initiating Compile"
cd ${origindir}
cd ${origindir}


#Copying raisetheempires to prepare compilation on that platform
echo "${compileprefix} Preparing empires-server Master sourcefile"
mkdir -p "${fakeroot}"
mkdir -p "${fakeroot}/raisetheempires-dev"
sudo cp -r ${origindir}/raisetheempires-dev ${fakeroot}
echo "${compileprefix} Installing Language Files"
sudo cp -r ${origindir}/language/* ${fakeroot}/raisetheempires-dev/assets/32995
sudo cp -r ${origindir}/language/* ${fakeroot}/raisetheempires-dev/assets/29oct2012
echo "${compileprefix} Injecting Custom Mods source"
sudo cp -r ${origindir}/raisetheempiresMod-dev/* ${fakeroot}/raisetheempires-dev
echo "${compileprefix} Merging empires-server.py"
if [ -f "raisetheempiresMod-dev/empires-server.py" ]; then
diff -D RepoMergeTool raisetheempires-dev/empires-server.py  raisetheempiresMod-dev/empires-server.py > ${fakeroot}/raisetheempires-dev/empires-server.py
fi
echo "${compileprefix} Installing Dependencies"
sleep 2
distroDetection
#list="cmake jdk-openjdk npm patchelf dialog python python3 python3-setuptools python-setuptools nano wget busybox python python-setuptools upx binutils fish wine-staging build-essential base-devel git "
#for a in ${list} ;do
#${packmanager} ${installParameter} ${a}
#done
pkginstall "cmake jdk-openjdk npm patchelf dialog python python3 python3-setuptools python-setuptools nano wget busybox python python-setuptools upx binutils fish wine-staging build-essential base-devel git pip git+git://github.com/christhechris/libscrc"
#pip install git+git://github.com/christhechris/libscrc
#npmRuntime=$( npm install -g grunt > /dev/tty ) #compile tool swf to html5
#easy_install pip
echo "${compileprefix} Building EAL"


if [ ${instTarget} == 'windows' ]; then
export backDir=$(pwd)

if [[ $(grep Microsoft /proc/version) ]]; then
  cd ${fakeroot}
echo ${compileprefix} Unfortunately compiling windows binary is unsupported on WSL 32BitELF is unsupported
echo ${compileprefix} However we could try some tricks but its not guranteed it will work if you dont have admin rights
echo ${compileprefix} Attempting to use Bare metal NT Kernel mode
sleep 2
echo ${compileprefix} if you see windows version popup means it is working
winver.exe
rm -rf python-3.8* get-pip.p*
wget "https://www.python.org/ftp/python/3.8.2/python-3.8.2.exe"
wget "https://bootstrap.pypa.io/get-pip.py"
echo ${PATH}
pwd
cmd.exe /C "python-3.8.2.exe /quiet"
cmd.exe /C "python get-pip.py --install --user"
git clone http://github.com/christhechris/libscrc
cd libscrc
pwd
cmd.exe /C "python setup.py install"
cd ..
pwd
cmd.exe /C "python -m pip install -r requirements.txt"
cmd.exe /C "python -m pip install pyinstaller"
cd raisetheempires-dev
cp build-tools/empires-server.spec .
mkdir RNT

cmd.exe /C "python -m pyinstaller empires-server.spec --distpath /RaiseTheEmpires"
echo 'echo Compilation Skipped' > ${fakeroot}/compilescript.sh
echo 'sh' > ${fakeroot}/compilescript.sh
else
    echo 'wget https://www.python.org/ftp/python/3.8.2/python-3.8.2.exe' > ${fakeroot}/compilescript.sh
echo 'wget https://bootstrap.pypa.io/get-pip.py' >> ${fakeroot}/compilescript.sh
echo 'wine python-3.8.2.exe /quiet' >> ${fakeroot}/compilescript.sh
echo 'wine python get-pip.py --install --user' >> ${fakeroot}/compilescript.sh
echo 'fi' >> ${fakeroot}/compilescript.sh
echo 'cd /raisetheempires-dev' >> ${fakeroot}/compilescript.sh
echo 'wine python -m pip install -r requirements.txt' >> ${fakeroot}/compilescript.sh
echo 'wine python -m pip install pyinstaller' >> ${fakeroot}/compilescript.sh
echo 'sh' >> ${fakeroot}/compilescript.sh
fi
fi

if [ ${instTarget} == 'termux' ]; then
  echo "${compileprefix} Termux mode"
  echo '#!/bin/bash' > ${fakeroot}/compilescript.sh
  echo 'python3 -m pip install --upgrade pip' >> ${fakeroot}/compilescript.sh
  echo 'python3 -m pip install pyminifier' >> ${fakeroot}/compilescript.sh
  echo 'mkdir /RaiseTheEmpires' >> ${fakeroot}/compilescript.sh
  echo 'cp -r /raisetheempires-dev/*.py /RaiseTheEmpires' >> ${fakeroot}/compilescript.sh
fi

if [ ${instTarget} == 'gnulinux' ]; then
  echo "${compileprefix} gnulinux mode"
  echo '#!/bin/bash' > ${fakeroot}/compilescript.sh
  echo 'python3 -m pip install --upgrade pip' >> ${fakeroot}/compilescript.sh
  echo 'python3 -m pip install pyminifier' >> ${fakeroot}/compilescript.sh
  echo 'mkdir /RaiseTheEmpires' >> ${fakeroot}/compilescript.sh
  echo 'cp -r /raisetheempires-dev/*.py /RaiseTheEmpires' >> ${fakeroot}/compilescript.sh
fi

if [ ${instTarget} == 'macOS' ]; then
  echo "${compileprefix} gnulinux mode"
  echo '#!/bin/bash' > ${fakeroot}/compilescript.sh
  echo 'python3 -m pip install --upgrade pip' >> ${fakeroot}/compilescript.sh
  echo 'python3 -m pip install pyminifier' >> ${fakeroot}/compilescript.sh
  echo 'mkdir /RaiseTheEmpires' >> ${fakeroot}/compilescript.sh
  echo 'cp -r /raisetheempires-dev/*.py /RaiseTheEmpires' >> ${fakeroot}/compilescript.sh
fi

if [ ${instTarget} == 'android' ]; then
  echo 'if [ -z $(which python3) ]; then' > ${fakeroot}/compilescript.sh
  echo 'cd /Python37src' >> ${fakeroot}/compilescript.sh
  echo './configure --enable-shared' >> ${fakeroot}/compilescript.sh
  echo 'make -j 8' >> ${fakeroot}/compilescript.sh
  echo 'make install' >> ${fakeroot}/compilescript.sh
  echo 'fi' >> ${fakeroot}/compilescript.sh
  echo 'python3 -m pip install --upgrade pip' >> ${fakeroot}/compilescript.sh
  echo 'cd /raisetheempires-dev' >> ${fakeroot}/compilescript.sh
  echo 'python3 -m pip install -r requirements.txt' >> ${fakeroot}/compilescript.sh
  echo 'python3 -m pip install python-for-android ' >> ${fakeroot}/compilescript.sh
  echo 'wget https://dl.google.com/android/repository/sdk-tools-linux-3859397.zip' >> ${fakeroot}/compilescript.sh
  echo 'unzip sdk-tools-linux-3859397.zip' >> ${fakeroot}/compilescript.sh
  echo 'echo Unfinished Code Transitioning to Debug mode' >> ${fakeroot}/compilescript.sh
  echo 'sh' >> ${fakeroot}/compilescript.sh
fi


if [ ${instTarget} == 'gnulinuxOLD' ] ; then
echo 'if [ -z $(which python3) ]; then' > ${fakeroot}/compilescript.sh
echo 'cd /Python37src' >> ${fakeroot}/compilescript.sh
echo './configure --enable-shared' >> ${fakeroot}/compilescript.sh
echo 'make -j 8' >> ${fakeroot}/compilescript.sh
echo 'make install' >> ${fakeroot}/compilescript.sh
echo 'fi' >> ${fakeroot}/compilescript.sh
echo 'ldconfig /usr/local/lib'  >> ${fakeroot}/compilescript.sh
echo 'cd /raisetheempires-dev' >> ${fakeroot}/compilescript.sh
echo 'python3 -m pip install --upgrade pip' >> ${fakeroot}/compilescript.sh
echo 'python3 -m pip install git+git://github.com/christhechris/libscrc' >> ${fakeroot}/compilescript.sh
echo 'python3 -m pip install staticx pycrypto pep517' >> ${fakeroot}/compilescript.sh
echo 'python3 -m pip install git+git://github.com/pypa/pep517' >> ${fakeroot}/compilescript.sh
#echo 'wget https://github.com/pyinstaller/pyinstaller/releases/download/v3.6/PyInstaller-3.6.tar.gz ; tar -xf PyInstaller-3.6.tar.gz; cd PyInstaller-3.6' >> ${fakeroot}/compilescript.sh
echo 'git clone http://github.com/pyinstaller/pyinstaller' >> ${fakeroot}/compilescript.sh
echo 'cd pyinstaller; pip install -r tests/requirements-tools.txt ; cd bootloader; python3 ./waf -j4 -v distclean all; cd .. ; python3 setup.py -v install ; cd /raisetheempires-dev' >> ${fakeroot}/compilescript.sh
#echo 'python3 -m pip install git+git://github.com/pyinstaller/pyinstaller' >> ${fakeroot}/compilescript.sh #Installing directly won't work since other arch like aarch64 armv7x bootlaoder doesn't compile automatically
echo 'python3 -m pip install -r requirements.txt' >> ${fakeroot}/compilescript.sh
echo 'cp build-tools/empires-server.spec .' >> ${fakeroot}/compilescript.sh
echo 'mkdir RNT;pyinstaller empires-server.spec --distpath /RaiseTheEmpires' >> ${fakeroot}/compilescript.sh #https://stackoverflow.com/questions/18841334/using-an-alternate-tmp-location-with-pyinstaller/18848945
fi

deSanitizeMountfakeroot
echo "${compileprefix} Universal Binary Compile finished"
}

bindistTrimming(){
  if [ ${packmode} == 'fakeroot' ]; then
    echo "${compileprefix} no massive cleanup needed"
    echo "${compileprefix} skipping straight into Packing"
    cat ${origindir}/staticTemplate/empires-server-routines_template.sh > ${origindir}
  fi

  if [ ${packmode} == 'staticbin' ]; then
    echo "${compileprefix} Cleaning up"
        rm -rf ${origindir}/tmp
    #exit
    echo "${compileprefix} Writing server-routines"
    echo "${compileprefix} Writing .ini generator"
    echo 'export origindir=$(pwd)' > ${origindir}/empires-server-routines.sh
    echo 'export RUNTIMEDIR=${origindir}/._MEI202028' >> ${origindir}/empires-server-routines.sh
    echo 'sudo apt-get install python3 python3-setuptools python3-dev git dialog ssh -y' >> ${origindir}/empires-server-routines.sh
    echo 'sudo pacman -S python git dialog python-setuptools openssh --noconfirm' >> ${origindir}/empires-server-routines.sh
    echo 'python3 -m pip install tendo py3amf flask flask_session flask_sqlalchemy flask_compress flask_socketio daiquiri git+git://github.com/christhechris/libscrc python-editor' >> ${origindir}/empires-server-routines.sh
    cat ${origindir}/staticTemplate/defaultFlaskConfig >> ${origindir}/empires-server-routines.sh
    echo 'export TMPDIR=$(pwd)/RaiseTheEmpires/RNT' >> ${origindir}/empires-server-routines.sh
    echo 'export origindir=$(pwd)' >> ${origindir}/empires-server-routines.sh
    cat ${origindir}/staticTemplate/empires-server-routine-menu >> ${origindir}/empires-server-routines.sh
  fi

  if [ ${instTarget} == 'termux' ]; then
    echo "${compileprefix} Cleaning up"
    rm -rf ${origindir}/tmp
    mkdir ${origindir}/tmp
    #exit
    echo "${compileprefix} Writing server-routines"
    echo "${compileprefix} Writing .ini generator"
    echo 'export origindir=$(pwd)' > ${origindir}/empires-server-routines.sh
    echo 'export RUNTIMEDIR=${origindir}/._MEI202028' >> ${origindir}/empires-server-routines.sh
    echo 'pkg install python git clang dialog openssh -y' >> ${origindir}/empires-server-routines.sh
    echo 'python -m pip install tendo py3amf flask flask_session flask_sqlalchemy flask_compress flask_socketio daiquiri git+git://github.com/christhechris/libscrc python-editor' >> ${origindir}/empires-server-routines.sh
    cat ${origindir}/staticTemplate/defaultFlaskConfig_termux >> ${origindir}/empires-server-routines.sh
    echo 'export origindir=$(pwd)' >> ${origindir}/empires-server-routines.sh
    cat ${origindir}/staticTemplate/empires-server-routine-menu >> ${origindir}/empires-server-routines.sh
  fi


  if [ ${instTarget} == 'androidWrap' ]; then
    echo "${compileprefix} Cleaning up"
    rm -rf ${origindir}/tmp
    mkdir ${origindir}/tmp
    #exit
    echo "${compileprefix} Writing server-routines"
    echo "${compileprefix} Writing .ini generator"
    echo 'export origindir=$(pwd)' > ${origindir}/empires-server-routines.sh
    echo 'export RUNTIMEDIR=${origindir}/._MEI202028' >> ${origindir}/empires-server-routines.sh
    echo 'apt-get install python git dialog openssh -y' >> ${origindir}/empires-server-routines.sh
    echo 'python3 -m pip install tendo py3amf flask flask_session flask_sqlalchemy flask_compress flask_socketio daiquiri git+git://github.com/christhechris/libscrc python-editor' >> ${origindir}/empires-server-routines.sh
    cat ${origindir}/staticTemplate/defaultFlaskConfig_termux >> ${origindir}/empires-server-routines.sh
    echo 'export origindir=$(pwd)' >> ${origindir}/empires-server-routines.sh
    cat ${origindir}/staticTemplate/empires-server-routine-menu >> ${origindir}/empires-server-routines.sh
  fi
}







packallupfordist(){
  if [ ${packmode} == 'staticbin' ]; then
    export exclusion=fakeroot
  else
    export exclusion=a9as08dnzxg
  fi
  ### Whole Packing Compile
  echo "${compileprefix} Cleaning Setup"
  printf '\e[38;5;221m ' yellow
  sleep 1
  rm -rf ${origindir}/tmp
  echo "${compileprefix} Changing permission"
  sudo chmod -R 777 RaiseTheEmpires
  echo "${compileprefix} Packing Empires-server"
  printf '\e[38;5;221m ' yellow
  cd ${origindir}/..
  XZ_OPT=-9 tar czf empires-RNT --exclude experiments --exclude "*fakeroot*" --exclude "*.log*" --exclude frontEnd --exclude shumway --exclude raisetheempiresMod-dev --exclude ${exclusion} --exclude Python37src --exclude installCache --exclude devTool --exclude devnote.txt --exclude containerdist --exclude proot --exclude x64EMU --exclude x86_64 --exclude raisetheempires-dev --exclude proot --exclude containerdist --exclude x86_64_prepared --exclude compile.sh --exclude x86_64kernel --exclude empires-setup.exe --exclude io --exclude installcache --exclude commandergenius --exclude firmware --exclude "bochsEngine" --exclude "*empiresTest*" --exclude staticTemplate --exclude RaiseTheEmpire empiresservercontainer
  if [ ${instTarget} == 'termux' ]; then
    echo '#!/data/data/com.termux/files/usr/bin/bash' > empires-server
    cat ${origindir}/staticTemplate/Starttemplate_termux >> empires-server

  fi

  if [ ${instTarget} == 'gnulinux' ]; then
    echo '#!/bin/bash' > empires-server
    cat ${origindir}/staticTemplate/Starttemplate_gnulinux >> empires-server
  fi

    if [ ${instTarget} == 'macOS' ]; then
    echo '#!/bin/bash' > empires-server
    cat ${origindir}/staticTemplate/Starttemplate_macOS >> empires-server
  fi

  md5sum empires-RNT >> empires-server
  cat empires-RNT | base32 >> empires-server
  chmod 777 empires-server
  rm -rf empires-RNT ${emu64fakeroot}
  mkdir compiledbin
  mv empires-server compiledbin/empires-server-${instTarget}-${buildnum}
  echo $compileprefix compiled successfully became empires-server-${instTarget}-${buildnum}
  echo You can check it on compiledbin folder
  echo "Version ${buildnum}"

  if [ ${instTarget} == 'androidWrap' ]; then
    echo Compiling Export to the Wrapper
    echo Compiling commandergenius
    clear
    echo "function is not implemented therefore compilation are aborted"
    echo "This is not an error but rather the installation instruction are not available"
    exit
fi
}


buildNumberRequest(){
  if [ ! -f ${origindir}/buildnumber ]; then
    echo 0 > ${origindir}/buildnumber
  fi
  bldnum=$( cat ${origindir}/buildnumber )
  export buildnum=$(echo ${bldnum})
  export buildnum=$(( ${buildnum} + 1 ))
  echo ${buildnum} > ${origindir}/buildnumber
  echo empires-server Port_native edition build number ${buildnum}
}


assembleServer(){



cd ${origindir}
echo "${compileprefix} Assembling server into a program folder"
echo "${compileprefix} ${origindir}/RaiseTheEmpires"
mkdir -p "${origindir}/RaiseTheEmpires"
echo "${compileprefix} Assembling savefiles"
# for Main execution
#This is copying what already patched by the RaiseTheEmpiresMod-dev
cp -r ${fakeroot}/raisetheempires-dev/*.py ${origindir}/RaiseTheEmpires
#see devnote.txt for details
mkdir ${origindir}/RaiseTheEmpires/fileSave
cp -r ${fakeroot}/raisetheempires-dev/allies ${origindir}/RaiseTheEmpires/fileSave
cp -r ${fakeroot}/raisetheempires-dev/gamesettings-converted.json ${origindir}/RaiseTheEmpires/fileSave
cp -r ${fakeroot}/raisetheempires-dev/questsettings-converted.json ${origindir}/RaiseTheEmpires/fileSave
cp -r ${fakeroot}/raisetheempires-dev/save.db ${origindir}/RaiseTheEmpires/fileSave
echo ${compileprefix} Assembling assets
cp -r ${fakeroot}/raisetheempires-dev/assets ${origindir}/RaiseTheEmpires/
cp -r ${fakeroot}/raisetheempires-dev/templates ${origindir}/RaiseTheEmpires/
if [ ${packmode} == "fakeroot" ]; then
echo "${compileprefix} fakeroot mode requested creating .ini files"

fi
}
